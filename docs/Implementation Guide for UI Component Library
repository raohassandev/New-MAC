# Implementation Guide for UI Component Library

This guide outlines the steps to implement the UI component library in your application, including migration from legacy components and best practices for component usage.

## Getting Started

### 1. Setup Dependencies

Ensure you have all required dependencies installed:

```bash
npm install clsx tailwind-merge lucide-react
```

### 2. Update Tailwind Configuration

Make sure your `tailwind.config.js` includes all necessary utility classes:

```js
module.exports = {
  // ... other Tailwind config
  theme: {
    extend: {
      animation: {
        'progress': 'progress 1s ease-in-out infinite',
        'skeleton-wave': 'skeleton-wave 1.5s ease-in-out 0.5s infinite',
      },
      keyframes: {
        'progress': {
          '0%': { backgroundPosition: '1rem 0' },
          '100%': { backgroundPosition: '0 0' },
        },
        'skeleton-wave': {
          '0%': { backgroundPosition: '-200% 0' },
          '100%': { backgroundPosition: '200% 0' },
        },
      },
      backgroundImage: {
        'stripes': 'linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent)',
      },
      backgroundSize: {
        'stripes': '1rem 1rem',
      },
    },
  },
}
```

### 3. Create Utility Functions

Make sure the `cn` utility function is available in your project:

```typescript
// src/utils/cn.ts
import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
```

## Migrating from Legacy Components

To smoothly transition from the legacy components to the new UI library:

### 1. Initial Assessment

1. Identify which legacy components are being used and where
2. Map legacy components to their UI library equivalents
3. Prioritize which components to migrate first (start with the most commonly used ones)

### 2. Create an Alias (Optional)

To minimize code changes, you can temporarily create an alias:

```typescript
// legacy-compatibility.ts
import { Button as UIButton } from './ui/Button';
// Re-export with the old component's API
export const Button = UIButton;
```

### 3. Incremental Migration

Instead of migrating everything at once, use this approach:

1. Start with smaller, isolated components
2. Update one component or page at a time
3. Test thoroughly after each component migration
4. Gradually deprecate the old components

### 4. Update Imports

Update component imports throughout your application:

```typescript
// Before
import { Button } from '../components/core/Button';

// After
import { Button } from '../components/ui/Button';

// Or use the index file for all components
import { Button, Alert, Card } from '../components/ui';
```

## Best Practices for Implementation

### Component Usage

1. **Use composition over inheritance**:
   ```tsx
   // Good
   <Card>
     <CardHeader>
       <CardTitle>Title</CardTitle>
     </CardHeader>
     <CardContent>Content</CardContent>
   </Card>
   ```

2. **Keep stateful logic in container components**:
   ```tsx
   // Container component
   const DeviceList = () => {
     const [devices, setDevices] = useState([]);
     // Fetch and manage data here
     return <DeviceListUI devices={devices} />;
   };

   // Presentation component
   const DeviceListUI = ({ devices }) => (
     <div>
       {devices.map(device => (
         <DeviceCard key={device.id} device={device} />
       ))}
     </div>
   );
   ```

3. **Use prop spreading carefully**:
   ```tsx
   // Good: Explicitly define which props to pass
   const CustomButton = ({ children, onClick, className }) => {
     return (
       <Button onClick={onClick} className={className}>
         {children}
       </Button>
     );
   };

   // Also acceptable: Explicitly exclude certain props
   const CustomButton = ({ style, ...props }) => {
     // Exclude style prop but pass everything else
     return <Button {...props} />;
   };
   ```

### Styling and Customization

1. **Use the `cn` utility for class merging**:
   ```tsx
   <Button 
     className={cn(
       'my-custom-class',
       isActive && 'active-class'
     )}
   >
     Custom Button
   </Button>
   ```

2. **Create component variants**:
   ```tsx
   // Define variants in a separate file
   const buttonVariants = {
     primary: 'bg-blue-500 text-white',
     secondary: 'bg-gray-200 text-gray-800',
     // ...other variants
   };

   // Use in component
   <Button variant={buttonVariants[variant]} />
   ```

3. **Maintain accessibility**:
   ```tsx
   // Ensure interactive elements have appropriate ARIA attributes
   <Button 
     aria-label={label ? undefined : 'Close'}
     aria-disabled={disabled}
   >
     {label || <CloseIcon />}
   </Button>
   ```

### Type Safety

1. **Use TypeScript interfaces for props**:
   ```tsx
   interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
     variant?: 'primary' | 'secondary';
     isLoading?: boolean;
   }
   ```

2. **Use union types for limited options**:
   ```tsx
   type ButtonSize = 'sm' | 'md' | 'lg';
   ```

3. **Provide default props**:
   ```tsx
   const Button = ({ 
     variant = 'primary',
     size = 'md',
     ...props 
   }: ButtonProps) => {
     // Component implementation
   };
   ```

## Advanced Implementation Techniques

### Creating Component Compositions

For more complex UI patterns, create composition functions:

```tsx
// src/compositions/DataTable.tsx
import { Table, Pagination, SearchInput } from '../components/ui';

export function DataTable({ 
  data,
  columns,
  currentPage,
  totalPages,
  onPageChange,
  onSearch
}) {
  return (
    <div className="space-y-4">
      <SearchInput onSearch={onSearch} />
      
      <Table>
        <Table.Header>
          <Table.Row>
            {columns.map(column => (
              <Table.Head key={column.key}>{column.label}</Table.Head>
            ))}
          </Table.Row>
        </Table.Header>
        <Table.Body>
          {data.map(row => (
            <Table.Row key={row.id}>
              {columns.map(column => (
                <Table.Cell key={`${row.id}-${column.key}`}>
                  {row[column.key]}
                </Table.Cell>
              ))}
            </Table.Row>
          ))}
        </Table.Body>
      </Table>
      
      <Pagination 
        currentPage={currentPage}
        totalPages={totalPages}
        onPageChange={onPageChange}
      />
    </div>
  );
}
```

### Creating Theme Variants

For components that need multiple themes or appearances:

```tsx
// src/themes/buttonThemes.ts
export const buttonThemes = {
  light: {
    primary: 'bg-blue-500 text-white hover:bg-blue-600',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300',
  },
  dark: {
    primary: 'bg-blue-700 text-white hover:bg-blue-800',
    secondary: 'bg-gray-700 text-white hover:bg-gray-800',
  },
};

// Usage in component
import { buttonThemes } from '../themes/buttonThemes';

function ThemedButton({ theme = 'light', variant = 'primary', ...props }) {
  return (
    <Button 
      className={buttonThemes[theme][variant]} 
      {...props} 
    />
  );
}
```

### Performance Optimization

For performance-critical components:

```tsx
// Memoize components that render frequently but don't change often
import { memo } from 'react';

const DeviceCard = memo(({ device }) => {
  return (
    <Card>
      <CardHeader>
        <CardTitle>{device.name}</CardTitle>
      </CardHeader>
      <CardContent>{/* Device details */}</CardContent>
    </Card>
  );
});

// Use React.lazy for code splitting
const DashboardPage = React.lazy(() => import('./pages/Dashboard'));
```

## Troubleshooting Common Issues

### Component Styling Issues

**Problem**: Custom styles are not being applied correctly.

**Solution**: 
- Check if you're using the `cn` utility for class merging
- Ensure Tailwind classes are not conflicting
- Check for higher-specificity CSS that might be overriding your styles

### Type Errors

**Problem**: TypeScript errors related to component props.

**Solution**:
- Check if you're passing the correct prop types
- Make sure required props are not missing
- Use appropriate interfaces for component props

### Naming Conflicts

**Problem**: Import conflicts between similar components.

**Solution**:
- Use named imports to be explicit about which component you're using
- Import from specific files rather than index files when conflicts occur
- Consider renaming the conflicting imports

## Workflow Integration

### Component Documentation

Maintain up-to-date documentation for all components:

```tsx
/**
 * Button component for triggering actions.
 * 
 * @example
 * ```tsx
 * <Button variant="primary" onClick={handleClick}>
 *   Click Me
 * </Button>
 * ```
 * 
 * @param variant - The visual style of the button
 * @param size - The size of the button
 * @param isLoading - Whether to show a loading indicator
 */
export const Button = ({ variant, size, isLoading, ...props }: ButtonProps) => {
  // Implementation
};
```

### Testing Components

Create tests for your components:

```tsx
// Button.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from '../components/ui/Button';

describe('Button', () => {
  it('renders correctly', () => {
    render(<Button>Click Me</Button>);
    expect(screen.getByText('Click Me')).toBeInTheDocument();
  });

  it('calls onClick when clicked', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click Me</Button>);
    fireEvent.click(screen.getByText('Click Me'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('is disabled when isLoading is true', () => {
    render(<Button isLoading>Click Me</Button>);
    expect(screen.getByRole('button')).toBeDisabled();
  });
});
```

## Conclusion

By following this implementation guide, you'll be able to smoothly integrate the UI component library into your application, while ensuring a consistent user experience and maintainable codebase.

Remember to:
1. Start with a clear migration plan
2. Update one component at a time
3. Test thoroughly after each change
4. Maintain documentation as you go

This approach will minimize disruption while allowing you to benefit from the improved UI components.
